name: ECS Continuous Integration
run-name: ${{ github.actor }} is running Continuous Integration on GitHub Actions ðŸš€
on: [push]
env: 
  ECR_ENDPOINT: 255945442255.dkr.ecr.us-east-1.amazonaws.com
jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5
      - name: Run installation of dependencies commands
        run: npm install


  code-unit-testing:
    runs-on: ubuntu-latest
    needs: [install-dependencies]
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5

      - name: Run installation of dependencies commands
        run: npm install

      - name: Run unit testing command
        run: |
          npm test

  code-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [install-dependencies]
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: | 
          snyk test --severity-threshold=high
          snyk test --severity-threshold=high --json > snyk-results.json

      - name: Upload Snyk Scan Results
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-scan-results
          path: snyk-results.json

  iac-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [install-dependencies]
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Code Scan And Check Snyk Scan Results
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk iac test --severity-threshold=high
          snyk iac test --severity-threshold=high --json > snyk_iac_report.json
      - name: Upload Snyk IaC Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-iac-report
          path: snyk_iac_report.json

  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: [code-vulnerability-scanning, iac-vulnerability-scanning]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

      - name: Create ECR if it does not exist
        run: |
         aws ecr describe-repositories --repository-names group-3-ecr-netflix-clone || \
         aws ecr create-repository --repository-name group-3-ecr-netflix-clone

        env: 
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_ENDPOINT }}
      - name: Docker build and tag
        working-directory: backend
        run: |
            docker build -t ${{ vars.IMAGE_NAME }} .
            docker tag ${{ vars.IMAGE_NAME }}:latest ${{ env.ECR_ENDPOINT }}/${{ vars.IMAGE_NAME }}:latest
      - name: Run image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ vars.IMAGE_NAME }}:latest'
          format: 'table'
          # exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          output: 'docker-image-scan.json'
      - name: Upload Docker Trivy Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: docker-image-scan
          path: docker-image-scan.json
      - name: Docker publish to ECR
        run: docker push ${{ env.ECR_ENDPOINT }}/${{ vars.IMAGE_NAME }}:latest



#   deploy-image-dev:
    # needs: [build-and-scan-image]
    # name: "Deployed image to dev"
    # uses: meezee91/netflix-test/.github/workflows/cd.yml@main
    # with:
        # target_env: "dev"
        # action: "deploy"
    # secrets: inherit
    # if: ${{ github.ref_name == 'main' || github.ref_name == 'develop' || startsWith(github.ref_name, 'feature/') }}

#   deploy-image-uat:
    # needs: [build-and-scan-image]
    # name: "Deployed image to uat"
    # uses: meezee91/c5-containers-cicd/.github/workflows/cd.yml@main
    # with:
        # target_env: "uat"
        # action: "deploy"
    # secrets: inherit
    # if: ${{ startsWith(github.ref_name, 'release/') }}
# 
#   deploy-image-prod:
    # needs: [build-and-scan-image, deploy-image-uat]
    # name: "Deployed image to prod"
    # uses: meezee91/c5-containers-cicd/.github/workflows/cd.yml@main
    # with:
        # target_env: "prod"
        # action: "deploy"
    # secrets: inherit
    # if: ${{ startsWith(github.ref_name, 'release/') }}
